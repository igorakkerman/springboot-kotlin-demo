openapi: 3.0.3
info:
  title: Device Configuration
  description: management API for configurations of devices
  version: 1.0.0
paths:
  /devices:
    get:
      summary: finds all device configurations
      description: lists all registered device configurations
      operationId: findAllDevices
      responses:
        200:
          description: list of all device configurations retrieved
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Device'
              examples:
                multiple:
                  value:
                    [
                      {
                        "type": "computer",
                        "id": "macpro-m1-95014",
                        "name": "best mac",
                        "username": "timapple",
                        "password": "0n3m0r3th1ng",
                        "ipAddress": "192.168.178.1"
                      },
                      {
                        "type": "display",
                        "id": "samsung-screen-88276",
                        "name": "favorite screen",
                        "resolution": "UHD"
                      }
                    ]
                empty:
                  value:
                    [ ]

    post:
      summary: creates a new device configuration
      operationId: createDevice
      requestBody:
        description: configuration of the device
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        400:
          description: invalid configuration data supplied
        409:
          description: device with specified ID already exists

  /devices/{deviceId}:
    get:
      summary: finds device configuration by device ID
      description: returns a single device configuation
      operationId: findDevice
      parameters:
        - name: deviceId
          in: path
          description: ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      responses:
        200:
          description: device found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Device'
        404:
          description: device not found

    put:
      summary: replaces device configuration
      description: fully replaces configuration of an existing device
      operationId: replaceDevice
      parameters:
        - name: deviceId
          in: path
          description: ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        description: full device configuration document; must include all configuration values
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
        required: true
      responses:
        400:
          description: invalid configuration data supplied
        404:
          description: device not found
        409:
          description: configuration for device of wrong type supplied

    patch:
      summary: updates device configuration values
      description: modifies configuration values of an existing device
      operationId: updateDevice
      parameters:
        - name: deviceId
          in: path
          description: ID of the device
          required: true
          schema:
            $ref: '#/components/schemas/DeviceId'
      requestBody:
        description: device configuration values to update; only modified values are required
        content:
          application/json+patch:
            schema:
              $ref: '#/components/schemas/DeviceUpdate'
        required: true
      responses:
        400:
          description: invalid ID supplied
        404:
          description: device not found

components:
  schemas:
    Device:
      type: object
      discriminator:
        propertyName: type
        mapping:
          computer: '#/components/schemas/Computer'
          display: '#/components/schemas/Display'
      properties:
        type:
          type: string
        id:
          $ref: '#/components/schemas/DeviceId'
        name:
          $ref: '#/components/schemas/DeviceName'
      required:
        - type
        - id
        - name

    Computer:
      allOf:
        - $ref: '#/components/schemas/Device'
        - type: object
          properties:
            username:
              $ref: '#/components/schemas/Username'
            password:
              $ref: '#/components/schemas/Password'
            ipAddress:
              $ref: '#/components/schemas/IpAddress'
          required:
            - username
            - password
            - ipAddress
      example: {
        "type": "computer",
        "id": "macpro-m1-95014",
        "name": "best mac",
        "username": "timapple",
        "password": "0n3m0r3th1ng",
        "ipAddress": "192.168.178.1"
      }


    Display:
      allOf:
        - $ref: '#/components/schemas/Device'
        - type: object
          properties:
            resolution:
              $ref: '#/components/schemas/Resolution'
          required:
            - resolution
      example: {
        "type": "display",
        "id": "samsung-screen-88276",
        "name": "favorite screen",
        "resolution": "UHD"
      }


    DeviceUpdate:
      type: object
      discriminator:
        propertyName: type
        mapping:
          computer: '#/components/schemas/ComputerUpdate'
          display: '#/components/schemas/DisplayUpdate'
      properties:
        name:
          $ref: '#/components/schemas/DeviceName'

    ComputerUpdate:
      anyOf:
        - $ref: '#/components/schemas/DeviceUpdate'
        - type: object
          properties:
            username:
              $ref: '#/components/schemas/Username'
            password:
              $ref: '#/components/schemas/Password'
            ipAddress:
              $ref: '#/components/schemas/IpAddress'

    DisplayUpdate:
      anyOf:
        - $ref: '#/components/schemas/DeviceUpdate'
        - type: object
          properties:
            resolution:
              $ref: '#/components/schemas/Resolution'

    DeviceId:
      type: string
      example: macpro-m1-95014

    DeviceName:
      type: string
      example: best mac

    Username:
      type: string
      example: timapple
      minLength: 4
      maxLength: 12

    Password:
      type: string
      example: 0n3m0r3th1ng
      minLength: 8
      maxLength: 32

    IpAddress:
      type: string
      pattern: ^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$

    Resolution:
      type: string
      enum: [ HD, WQHD, UHD ]

  requestBodies:
    deviceDocument:
      description: device document
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Computer'
              - $ref: '#/components/schemas/Display'

    deviceUpdateDocument:
      description: device update document
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ComputerUpdate'
              - $ref: '#/components/schemas/DisplayUpdate'

  responses:
    deviceDocument:
      description: device document
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/Computer'
              - $ref: '#/components/schemas/Display'
